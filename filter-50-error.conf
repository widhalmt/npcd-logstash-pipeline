filter {
  if [message] =~ /^ERROR/ {
    grok {
      match => ["message","ERROR rrdcached: illegal attempt to update using time %{NUMBER:newtime} when last update time is %{NUMBER:lasttime} \(%{DATA:[npcd][errordetail]}\)"]
      id => "npcd_error"
      add_tag => "npcd_error"
      tag_on_failure => ["_grokparsefailure","npcd_error_failed"]
      add_field => {
        "[npcd][eventtype]" => "npcd_rror"
      }
    }
    ruby {
      init => "require 'time'"
      code => "difference = (event.get('newtime') - event.get('lasttime')) rescue nil; event.set('timedifference',difference);"
    }
    date {
      match => ["newtime","UNIX"]
      target => "[npcd][newtime]"
    }
    date {
      match => ["lasttime","UNIX"]
      target => "[npcd][lasttime]"
    }
  }
}

